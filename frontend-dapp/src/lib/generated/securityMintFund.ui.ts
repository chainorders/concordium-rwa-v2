// This file was generated by the build script. Do not edit it manually.
/* eslint-disable no-mixed-spaces-and-tabs */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* tslint:disable:no-unused-variable */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
import { RJSFSchema, RegistryWidgetsType, UiSchema } from "@rjsf/utils";
import React from "react";
import { ContractAddress } from "@concordium/web-sdk";
import { default as client } from "./securityMintFund";
import * as types from "./securityMintFund";
import {
	GenericInit,
	GenericInvoke,
	GenericUpdate,
} from "../GenericContractUI";
export const initRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Init Request",
	properties: {
		token: {
			type: "object",
			title: "Token",
			properties: {
				contract: {
					type: "object",
					title: "Contract",
					properties: {
						index: { type: "integer", minimum: 0 },
						subindex: { type: "integer", minimum: 0 },
					},
				},
				id: { type: "string", title: "Id", default: "", format: "byte" },
			},
		},
		currency_token: {
			type: "object",
			title: "Currency Token",
			properties: {
				contract: {
					type: "object",
					title: "Contract",
					properties: {
						index: { type: "integer", minimum: 0 },
						subindex: { type: "integer", minimum: 0 },
					},
				},
				id: { type: "string", title: "Id", default: "", format: "byte" },
			},
		},
		investment_token: {
			type: "object",
			title: "Investment Token",
			properties: {
				contract: {
					type: "object",
					title: "Contract",
					properties: {
						index: { type: "integer", minimum: 0 },
						subindex: { type: "integer", minimum: 0 },
					},
				},
				id: { type: "string", title: "Id", default: "", format: "byte" },
			},
		},
		rate: {
			type: "object",
			title: "Rate",
			properties: {
				numerator: { type: "integer", minimum: 0, title: "Numerator" },
				denominator: { type: "integer", minimum: 0, title: "Denominator" },
			},
		},
		fund_state: {
			type: "object",
			title: "Fund State",
			properties: {
				tag: { type: "string", enum: ["Open", "Success", "Fail"] },
			},
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Open"] },
								Open: { type: "object", title: "Open", properties: {} },
							},
						},
						{
							properties: {
								tag: { enum: ["Success"] },
								Success: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											tag: { type: "string", enum: ["Account", "Contract"] },
										},
										required: ["tag"],
										dependencies: {
											tag: {
												oneOf: [
													{
														properties: {
															tag: { enum: ["Account"] },
															Account: {
																type: "array",
																items: { type: "string", title: "" },
															},
														},
													},
													{
														properties: {
															tag: { enum: ["Contract"] },
															Contract: {
																type: "array",
																items: [
																	{
																		type: "object",
																		title: "",
																		properties: {
																			index: { type: "integer", minimum: 0 },
																			subindex: { type: "integer", minimum: 0 },
																		},
																	},
																	{ type: "string", title: "", default: "" },
																],
															},
														},
													},
												],
											},
										},
									},
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Fail"] },
								Fail: { type: "object", title: "Fail", properties: {} },
							},
						},
					],
				},
			},
		},
	},
};
export type initRequestUi = {
	token: { contract: { index: number; subindex: number }; id: string };
	currency_token: { contract: { index: number; subindex: number }; id: string };
	investment_token: {
		contract: { index: number; subindex: number };
		id: string;
	};
	rate: { numerator: number; denominator: number };
	fund_state:
		| { tag: "Open"; Open: never }
		| {
				tag: "Success";
				Success: [
					| { tag: "Account"; Account: [string] }
					| {
							tag: "Contract";
							Contract: [{ index: number; subindex: number }, string];
					  },
				];
		  }
		| { tag: "Fail"; Fail: never };
};
export const initErrorJsonSchema: RJSFSchema = {
	type: "object",
	title: "Init Error",
	properties: {
		tag: {
			type: "string",
			enum: [
				"UnAuthorized",
				"ParseError",
				"LogError",
				"CurrencyTokenTransfer",
				"InvalidConversion",
				"InvalidFundState",
				"TokenMint",
				"TokenFreeze",
				"TokenForceBurn",
				"TokenBalance",
			],
		},
	},
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["UnAuthorized"] },
						UnAuthorized: {
							type: "object",
							title: "UnAuthorized",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["ParseError"] },
						ParseError: { type: "object", title: "ParseError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["LogError"] },
						LogError: { type: "object", title: "LogError", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["CurrencyTokenTransfer"] },
						CurrencyTokenTransfer: {
							type: "object",
							title: "CurrencyTokenTransfer",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidConversion"] },
						InvalidConversion: {
							type: "object",
							title: "InvalidConversion",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["InvalidFundState"] },
						InvalidFundState: {
							type: "object",
							title: "InvalidFundState",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TokenMint"] },
						TokenMint: { type: "object", title: "TokenMint", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["TokenFreeze"] },
						TokenFreeze: {
							type: "object",
							title: "TokenFreeze",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TokenForceBurn"] },
						TokenForceBurn: {
							type: "object",
							title: "TokenForceBurn",
							properties: {},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["TokenBalance"] },
						TokenBalance: {
							type: "object",
							title: "TokenBalance",
							properties: {},
						},
					},
				},
			],
		},
	},
};
export type initErrorUi =
	| { tag: "UnAuthorized"; UnAuthorized: never }
	| { tag: "ParseError"; ParseError: never }
	| { tag: "LogError"; LogError: never }
	| { tag: "CurrencyTokenTransfer"; CurrencyTokenTransfer: never }
	| { tag: "InvalidConversion"; InvalidConversion: never }
	| { tag: "InvalidFundState"; InvalidFundState: never }
	| { tag: "TokenMint"; TokenMint: never }
	| { tag: "TokenFreeze"; TokenFreeze: never }
	| { tag: "TokenForceBurn"; TokenForceBurn: never }
	| { tag: "TokenBalance"; TokenBalance: never };
export const cancelInvestmentRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Cancel Investment Request",
	properties: {
		investments: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: {
					investor: { type: "string", title: "Investor" },
					amount: { type: "string", title: "Amount" },
				},
			},
			title: "Investments",
		},
	},
};
export type CancelInvestmentRequestUi = {
	investments: { investor: string; amount: string }[];
};
export const claimInvestmentRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Claim Investment Request",
	properties: {
		investments: {
			type: "array",
			items: {
				type: "object",
				title: "",
				properties: { investor: { type: "string", title: "Investor" } },
			},
			title: "Investments",
		},
	},
};
export type ClaimInvestmentRequestUi = { investments: { investor: string }[] };
export const investRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Invest Request",
	properties: {
		token_id: {
			type: "string",
			title: "Token Id",
			default: "",
			format: "byte",
		},
		amount: { type: "string", title: "Amount" },
		from: {
			type: "object",
			title: "From",
			properties: { tag: { type: "string", enum: ["Account", "Contract"] } },
			required: ["tag"],
			dependencies: {
				tag: {
					oneOf: [
						{
							properties: {
								tag: { enum: ["Account"] },
								Account: {
									type: "array",
									items: { type: "string", title: "" },
								},
							},
						},
						{
							properties: {
								tag: { enum: ["Contract"] },
								Contract: {
									type: "array",
									items: {
										type: "object",
										title: "",
										properties: {
											index: { type: "integer", minimum: 0 },
											subindex: { type: "integer", minimum: 0 },
										},
									},
								},
							},
						},
					],
				},
			},
		},
		data: { type: "string", title: "Data", default: "", format: "byte" },
	},
};
export type InvestRequestUi = {
	token_id: string;
	amount: string;
	from:
		| { tag: "Account"; Account: [string] }
		| { tag: "Contract"; Contract: [{ index: number; subindex: number }] };
	data: string;
};
export const transferInvestRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Transfer Invest Request",
	properties: { amount: { type: "string", title: "Amount" } },
};
export type TransferInvestRequestUi = { amount: string };
export const updateFundStateRequestJsonSchema: RJSFSchema = {
	type: "object",
	title: "Update Fund State Request",
	properties: { tag: { type: "string", enum: ["Open", "Success", "Fail"] } },
	required: ["tag"],
	dependencies: {
		tag: {
			oneOf: [
				{
					properties: {
						tag: { enum: ["Open"] },
						Open: { type: "object", title: "Open", properties: {} },
					},
				},
				{
					properties: {
						tag: { enum: ["Success"] },
						Success: {
							type: "array",
							items: {
								type: "object",
								title: "",
								properties: {
									tag: { type: "string", enum: ["Account", "Contract"] },
								},
								required: ["tag"],
								dependencies: {
									tag: {
										oneOf: [
											{
												properties: {
													tag: { enum: ["Account"] },
													Account: {
														type: "array",
														items: { type: "string", title: "" },
													},
												},
											},
											{
												properties: {
													tag: { enum: ["Contract"] },
													Contract: {
														type: "array",
														items: [
															{
																type: "object",
																title: "",
																properties: {
																	index: { type: "integer", minimum: 0 },
																	subindex: { type: "integer", minimum: 0 },
																},
															},
															{ type: "string", title: "", default: "" },
														],
													},
												},
											},
										],
									},
								},
							},
						},
					},
				},
				{
					properties: {
						tag: { enum: ["Fail"] },
						Fail: { type: "object", title: "Fail", properties: {} },
					},
				},
			],
		},
	},
};
export type UpdateFundStateRequestUi =
	| { tag: "Open"; Open: never }
	| {
			tag: "Success";
			Success: [
				| { tag: "Account"; Account: [string] }
				| {
						tag: "Contract";
						Contract: [{ index: number; subindex: number }, string];
				  },
			];
	  }
	| { tag: "Fail"; Fail: never };
export const init = (props: {
	onInitialize: (contract: ContractAddress.Type) => void;
	uiSchema?: UiSchema;
	uiWidgets?: RegistryWidgetsType;
}) =>
	GenericInit<types.initRequest, initRequestUi>({
		onContractInitialized: props.onInitialize,
		uiSchema: props.uiSchema,
		uiWidgets: props.uiWidgets,
		method: client.init,
		requestJsonSchema: initRequestJsonSchema,
		requestSchemaBase64: types.initRequestSchemaBase64,
	});
export const ENTRYPOINTS_UI: {
	[key: keyof typeof types.ENTRYPOINTS]: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) => React.JSX.Element;
} = {
	cancelInvestment: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.CancelInvestmentRequest,
			CancelInvestmentRequestUi,
			never,
			never
		>({
			...props,
			method: client.cancelInvestment,
			requestJsonSchema: cancelInvestmentRequestJsonSchema,
			requestSchemaBase64: types.cancelInvestmentRequestSchemaBase64,
		}),
	claimInvestment: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.ClaimInvestmentRequest,
			ClaimInvestmentRequestUi,
			never,
			never
		>({
			...props,
			method: client.claimInvestment,
			requestJsonSchema: claimInvestmentRequestJsonSchema,
			requestSchemaBase64: types.claimInvestmentRequestSchemaBase64,
		}),
	invest: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<types.InvestRequest, InvestRequestUi, never, never>({
			...props,
			method: client.invest,
			requestJsonSchema: investRequestJsonSchema,
			requestSchemaBase64: types.investRequestSchemaBase64,
		}),
	transferInvest: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.TransferInvestRequest,
			TransferInvestRequestUi,
			never,
			never
		>({
			...props,
			method: client.transferInvest,
			requestJsonSchema: transferInvestRequestJsonSchema,
			requestSchemaBase64: types.transferInvestRequestSchemaBase64,
		}),
	updateFundState: (props: {
		contract: ContractAddress.Type;
		uiSchema?: UiSchema;
		uiWidgets?: RegistryWidgetsType;
	}) =>
		GenericUpdate<
			types.UpdateFundStateRequest,
			UpdateFundStateRequestUi,
			never,
			never
		>({
			...props,
			method: client.updateFundState,
			requestJsonSchema: updateFundStateRequestJsonSchema,
			requestSchemaBase64: types.updateFundStateRequestSchemaBase64,
		}),
};
